const userService = require('../services/userService');
const wordService = require('../services/wordService');
const grammarService = require('../services/grammarService');
const { formatWordMessage, formatGrammarMessage } = require('./messageHandler');

/**
 * Register all command handlers
 * @param {import('telegraf').Telegraf} bot - The Telegraf bot instance
 */
function register(bot) {
  // Start command
  bot.start(async (ctx) => {
    const userId = ctx.from.id;
    const chatId = ctx.chat.id;
    const username = ctx.from.username || `${ctx.from.first_name} ${ctx.from.last_name || ''}`.trim();
    
    await userService.registerUser(chatId, userId, username);
    
    ctx.reply(
      `ÏïàÎÖïÌïòÏÑ∏Ïöî! üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Korean Word Bot!\n\n` +
      `–Ø –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º –Ω–æ–≤–æ–µ –∫–æ—Ä–µ–π—Å–∫–æ–µ —Å–ª–æ–≤–æ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º —É—á–∏—Ç—å —è–∑—ã–∫.\n\n` +
      `–ö–æ–º–∞–Ω–¥—ã:\n` +
      `/word - –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –∫–æ—Ä–µ–π—Å–∫–æ–µ —Å–ª–æ–≤–æ\n` +
      `/grammar - –ò–∑—É—á–∏—Ç—å –≥—Ä–∞–º–º–∞—Ç–∏–∫—É –∫–æ—Ä–µ–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞\n` +
      `/level - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (–±–∞–∑–æ–≤—ã–π, —Å—Ä–µ–¥–Ω–∏–π, –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π)\n` +
      `/stats - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—É—á–µ–Ω–∏—è\n` +
      `/subscribe - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–ª–æ–≤–∞ –∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫—É\n` +
      `/unsubscribe - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Å–ª–æ–≤ –∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏\n`
    );
  });

  // Help command
  bot.help((ctx) => {
    ctx.reply(
      `üá∞üá∑ Korean Word Bot –ü–æ–º–æ—â—å üá∞üá∑\n\n` +
      `–ö–æ–º–∞–Ω–¥—ã:\n` +
      `/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n` +
      `/word - –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –∫–æ—Ä–µ–π—Å–∫–æ–µ —Å–ª–æ–≤–æ\n` +
      `/grammar - –ò–∑—É—á–∏—Ç—å –≥—Ä–∞–º–º–∞—Ç–∏–∫—É –∫–æ—Ä–µ–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞\n` +
      `/level - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (–±–∞–∑–æ–≤—ã–π, —Å—Ä–µ–¥–Ω–∏–π, –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π)\n` +
      `/stats - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—É—á–µ–Ω–∏—è\n` +
      `/subscribe - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–ª–æ–≤–∞ –∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫—É\n` +
      `/unsubscribe - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Å–ª–æ–≤ –∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏\n`
    );
  });

  // Get random word command
  bot.command('word', async (ctx) => {
    try {
      const chatId = ctx.chat.id;
      const user = await userService.getUser(chatId);
      const word = await wordService.getRandomWord(user?.level || 'basic');
      
      await ctx.reply(formatWordMessage(word));
      await userService.updateWordSent(chatId, word.id);
    } catch (err) {
      console.error('Error sending random word:', err);
      ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });

  // Grammar command - show level selection
  bot.command('grammar', async (ctx) => {
    ctx.reply(
      '–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏:',
      {
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'A1 (–ù–∞—á–∞–ª—å–Ω—ã–π)', callback_data: 'grammar_level:A1' },
              { text: 'A2 (–ë–∞–∑–æ–≤—ã–π)', callback_data: 'grammar_level:A2' }
            ],
            [
              { text: 'B1 (–°—Ä–µ–¥–Ω–∏–π)', callback_data: 'grammar_level:B1' },
              { text: 'B2 (–í—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ)', callback_data: 'grammar_level:B2' }
            ]
          ]
        }
      }
    );
  });

  // Handle grammar level selection
  bot.action(/grammar_level:(.+)/, async (ctx) => {
    const level = ctx.match[1];
    const grammarPoints = await grammarService.getGrammarByLevel(level);
    
    const buttons = grammarPoints.map(g => ({
      text: g.title,
      callback_data: `grammar:${g.id}`
    }));

    // Create rows of 2 buttons each
    const keyboard = [];
    for (let i = 0; i < buttons.length; i += 2) {
      keyboard.push(buttons.slice(i, i + 2));
    }

    ctx.reply(
      `–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫—É—é –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é —É—Ä–æ–≤–Ω—è ${level}:`,
      {
        reply_markup: {
          inline_keyboard: keyboard
        }
      }
    );
  });

  // Handle specific grammar selection
  bot.action(/grammar:(\d+)/, async (ctx) => {
    try {
      const grammarId = ctx.match[1];
      const grammar = await grammarService.getGrammarById(grammarId);
      
      if (grammar) {
        await ctx.reply(formatGrammarMessage(grammar));
      } else {
        ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
      }
    } catch (err) {
      console.error('Error sending grammar card:', err);
      ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });

  // Level selection command
  bot.command('level', (ctx) => {
    ctx.reply(
      '–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∫–æ—Ä–µ–π—Å–∫–æ–π –ª–µ–∫—Å–∏–∫–∏:',
      {
        reply_markup: {
          inline_keyboard: [
            [
              { text: '–ë–∞–∑–æ–≤—ã–π', callback_data: 'level:basic' },
              { text: '–°—Ä–µ–¥–Ω–∏–π', callback_data: 'level:intermediate' },
              { text: '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π', callback_data: 'level:advanced' }
            ]
          ]
        }
      }
    );
  });

  // Subscribe command
  bot.command('subscribe', async (ctx) => {
    try {
      const chatId = ctx.chat.id;
      await userService.updateSubscription(chatId, true);
      ctx.reply('–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∫–æ—Ä–µ–π—Å–∫–∏–µ —Å–ª–æ–≤–∞ –∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫—É! üéâ');
    } catch (err) {
      console.error('Error subscribing user:', err);
      ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });

  // Unsubscribe command
  bot.command('unsubscribe', async (ctx) => {
    try {
      const chatId = ctx.chat.id;
      await userService.updateSubscription(chatId, false);
      ctx.reply('–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∫–æ—Ä–µ–π—Å–∫–∏—Ö —Å–ª–æ–≤ –∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è —Å –ø–æ–º–æ—â—å—é /subscribe.');
    } catch (err) {
      console.error('Error unsubscribing user:', err);
      ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });

  // Stats command
  bot.command('stats', async (ctx) => {
    try {
      const chatId = ctx.chat.id;
      const stats = await userService.getUserStats(chatId);
      
      const levelText = stats.level === 'basic' ? '–±–∞–∑–æ–≤—ã–π' : 
                       stats.level === 'intermediate' ? '—Å—Ä–µ–¥–Ω–∏–π' : 
                       '–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π';
      
      ctx.reply(
        `üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑—É—á–µ–Ω–∏—è –∫–æ—Ä–µ–π—Å–∫–æ–≥–æ:\n\n` +
        `–í—ã—É—á–µ–Ω–æ —Å–ª–æ–≤: ${stats.wordsLearned}\n` +
        `–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: ${levelText}\n` +
        `–î–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏: ${stats.daysSubscribed}\n` +
        `–°–µ—Ä–∏—è: ${stats.streak} –¥–Ω–µ–π\n`
      );
    } catch (err) {
      console.error('Error getting user stats:', err);
      ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.');
    }
  });

  // Handle level selection
  bot.action(/level:(.+)/, async (ctx) => {
    try {
      const chatId = ctx.chat.id;
      const level = ctx.match[1];
      
      if (['basic', 'intermediate', 'advanced'].includes(level)) {
        await userService.updateUserLevel(chatId, level);
        const levelText = level === 'basic' ? '–±–∞–∑–æ–≤—ã–π' : 
                         level === 'intermediate' ? '—Å—Ä–µ–¥–Ω–∏–π' : 
                         '–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π';
        ctx.reply(`–í–∞—à —É—Ä–æ–≤–µ–Ω—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞: ${levelText}`);
      } else {
        ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –±–∞–∑–æ–≤—ã–π, —Å—Ä–µ–¥–Ω–∏–π –∏–ª–∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π.');
      }
    } catch (err) {
      console.error('Error updating user level:', err);
      ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });
}

module.exports = {
  register
};